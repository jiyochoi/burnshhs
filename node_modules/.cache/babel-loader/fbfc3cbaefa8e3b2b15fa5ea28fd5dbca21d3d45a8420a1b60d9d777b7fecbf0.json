{"ast":null,"code":"const BASEPATH = 'http;//localhost:3000';\nexport async function getScore(grade, clazz) {\n  const resp = await fetch(BASEPATH + `/score/${grade}/${clazz}`);\n  const respJson = await resp.json();\n  if (!respJson.success) {\n    return 0;\n  } else {\n    return respJson.score;\n  }\n}\nexport async function addScore(grade, clazz, score) {\n  const resp = await fetch(BASEPATH + `/score/${grade}/${clazz}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      score\n    })\n  });\n  const respJson = await resp.json();\n  if (!respJson.success) {\n    return false;\n  } else {\n    return true;\n  }\n}\nexport async function getRanking() {\n  const resp = await fetch(BASEPATH + '/score/rank');\n  const respJson = await resp.json();\n  if (!respJson.success) {\n    return [];\n  } else {\n    return respJson.scores;\n  }\n}","map":{"version":3,"names":["BASEPATH","getScore","grade","clazz","resp","fetch","respJson","json","success","score","addScore","method","headers","body","JSON","stringify","getRanking","scores"],"sources":["/Users/jiyochoi/burstshhs/burstshhs/src/api.js"],"sourcesContent":["const BASEPATH = 'http;//localhost:3000'\n\nexport async function getScore(grade, clazz) {\n  const resp = await fetch(BASEPATH + `/score/${grade}/${clazz}`);\n  const respJson = await resp.json();\n\n  if (!respJson.success) {\n    return 0;\n  } else {\n    return respJson.score;\n  }\n}\n\nexport async function addScore(grade, clazz, score) {\n  const resp = await fetch(BASEPATH + `/score/${grade}/${clazz}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ score })\n  });\n  const respJson = await resp.json();\n\n  if (!respJson.success) {\n    return false;\n  } else {\n    return true;\n  }\n}\n\nexport async function getRanking() {\n  const resp = await fetch(BASEPATH + '/score/rank');\n  const respJson = await resp.json();\n\n  if (!respJson.success) {\n    return [];\n  } else {\n    return respJson.scores;\n  }\n}\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,uBAAuB;AAExC,OAAO,eAAeC,QAAQ,CAACC,KAAK,EAAEC,KAAK,EAAE;EAC3C,MAAMC,IAAI,GAAG,MAAMC,KAAK,CAACL,QAAQ,GAAI,UAASE,KAAM,IAAGC,KAAM,EAAC,CAAC;EAC/D,MAAMG,QAAQ,GAAG,MAAMF,IAAI,CAACG,IAAI,EAAE;EAElC,IAAI,CAACD,QAAQ,CAACE,OAAO,EAAE;IACrB,OAAO,CAAC;EACV,CAAC,MAAM;IACL,OAAOF,QAAQ,CAACG,KAAK;EACvB;AACF;AAEA,OAAO,eAAeC,QAAQ,CAACR,KAAK,EAAEC,KAAK,EAAEM,KAAK,EAAE;EAClD,MAAML,IAAI,GAAG,MAAMC,KAAK,CAACL,QAAQ,GAAI,UAASE,KAAM,IAAGC,KAAM,EAAC,EAAE;IAC9DQ,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEN;IAAM,CAAC;EAChC,CAAC,CAAC;EACF,MAAMH,QAAQ,GAAG,MAAMF,IAAI,CAACG,IAAI,EAAE;EAElC,IAAI,CAACD,QAAQ,CAACE,OAAO,EAAE;IACrB,OAAO,KAAK;EACd,CAAC,MAAM;IACL,OAAO,IAAI;EACb;AACF;AAEA,OAAO,eAAeQ,UAAU,GAAG;EACjC,MAAMZ,IAAI,GAAG,MAAMC,KAAK,CAACL,QAAQ,GAAG,aAAa,CAAC;EAClD,MAAMM,QAAQ,GAAG,MAAMF,IAAI,CAACG,IAAI,EAAE;EAElC,IAAI,CAACD,QAAQ,CAACE,OAAO,EAAE;IACrB,OAAO,EAAE;EACX,CAAC,MAAM;IACL,OAAOF,QAAQ,CAACW,MAAM;EACxB;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}